{
    parserClass="me.dmitvitalii.blueprint.lang.BlueprintParser"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Blueprint"
    psiImplClassSuffix="Impl"
    psiPackage="me.dmitvitalii.blueprint.lang.psi"
    psiImplPackage="me.dmitvitalii.blueprint.lang.psi.impl"

    elementTypeHolderClass="me.dmitvitalii.blueprint.lang.psi.BlueprintType"
    elementTypeClass="me.dmitvitalii.blueprint.lang.psi.BlueprintElementType"
    tokenTypeClass="me.dmitvitalii.blueprint.lang.psi.BlueprintTokenType"


    tokens = [
        LEFT_BRACE          = '{'
        RIGHT_BRACE         = '}'
        LEFT_BRACK          = '['
        RIGHT_BRACK         = ']'
        LEFT_PAREN          = '('
        RIGHT_PAREN         = ')'
        COMMA               = ','
        ASSIGN              = '='
        NOT                 = '!'
        PLUS_ASSIGN         = '+='
        // TODO: only as an operator!
        PLUS                = '+'
        MINUS_ASSIGN        = '-='
        // TODO: can be integer's sign
        MINUS               = '-'
        SEMICOLON_SYNTHETIC = '<NL>'

        LINE_COMMENT        = 'regexp://.*'
        // "/*" ([^*]|\*+[^*/])* (\*+"/")?
        MULTILINE_COMMENT   = 'regexp:/\*([^*]|\*+[^*/])*(\*+/)?'
        // else /\*(?:[^*]|\*[^/])*\*+/

        STRING              = "regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?"
        NUMBER              = 'regexp:-?(0|[1-9]\d*)(\.\d+)?([eE][+-]?\d*)?'
        TRUE                = 'true'
        FALSE               = 'false'
//        NULL='null' // FIXME: do we have nulls in Android.bp?
    ]
}

blueprintFile ::= item_*
private item_ ::= (property|LINE_COMMENT|MULTILINE_COMMENT|CRLF)
property ::= (KEY? SEPARATOR VALUE?) | KEY
